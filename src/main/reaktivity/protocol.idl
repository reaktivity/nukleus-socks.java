/*
 * Copyright 2016-2020 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
scope protocol
{
    option byteorder network;

    scope codec
    {
        enum SocksCommand (int8)
        {
            CONNECT (0x01),
            BIND (0x02),
            UDP_ASSOCIATE (0x03)
        }

        enum SocksCommandReplyType (int8)
        {
            SUCCEEDED (0x00),
            GENERAL_SOCKS_SERVER_FAILURE (0x01),
            CONNECTION_NOT_ALLOWED_BY_RULESET (0x02),
            NETWORK_UNREACHABLE (0x03),
            HOST_UNREACHABLE (0x04),
            CONNECTION_REFUSED (0x05),
            TTL_EXPIRED (0x06),
            COMMAND_NOT_SUPPORTED (0x07),
            ADDRESS_TYPE_NOT_SUPPORTED (0x08),
            TO_XFF_UNSIGNED (0x09)
        }

        enum SocksAuthenticationMethod (int16)
        {
            NO_AUTHENTICATION_REQUIRED (0x00),
            GSSAPI (0x01),
            USERNAME_PASSWORD (0x02),
            TO_X7F_IANA_ASSIGNED (0x03),
            TO_XFE_RESERVED_FOR_PRIVATE_METHODS (0x80),
            NO_ACCEPTABLE_METHODS (0xFF)
        }

        struct SocksHandshakeRequest
        {
            uint8 version = 5;
            uint8 nmethods;
            octets[nmethods] methods;
        }

        struct SocksHandshakeReply
        {
            uint8 version = 5;
            uint8 method;
        }

        union SocksNetworkAddress switch (uint8)
        {
            case 1: octets[4] ipv4Address;
            case 4: octets[16] ipv6Address;
            case 3: string8 domainName;
        }

        struct SocksCommandRequest
        {
            uint8 version = 5;
            SocksCommand command;
            uint8 reserved = 0;
            SocksNetworkAddress address;
            uint16 port;
        }

        struct SocksCommandReply
        {
            uint8 version = 5;
            SocksCommandReplyType type;
            uint8 reserved = 0;
            SocksNetworkAddress address;
            uint16 port;
        }
    }
}
